(function (t) { function e(e) { for (var a, i, r = e[0], u = e[1], p = e[2], l = 0, d = []; l < r.length; l++)i = r[l], Object.prototype.hasOwnProperty.call(s, i) && s[i] && d.push(s[i][0]), s[i] = 0; for (a in u) Object.prototype.hasOwnProperty.call(u, a) && (t[a] = u[a]); y && y(e); while (d.length) d.shift()(); return o.push.apply(o, p || []), n() } function n() { for (var t, e = 0; e < o.length; e++) { for (var n = o[e], a = !0, i = 1; i < n.length; i++) { var r = n[i]; 0 !== s[r] && (a = !1) } a && (o.splice(e--, 1), t = u(u.s = n[0])) } return t } var a = {}, i = { 1: 0 }, s = { 1: 0 }, o = []; function r(t) { return u.p + "js/" + ({}[t] || t) + "." + { 2: "793c5d7b", 3: "8de12357", 4: "08995ea2", 5: "dbf17ffe" }[t] + ".js" } function u(e) { if (a[e]) return a[e].exports; var n = a[e] = { i: e, l: !1, exports: {} }; return t[e].call(n.exports, n, n.exports, u), n.l = !0, n.exports } u.e = function (t) { var e = [], n = { 3: 1 }; i[t] ? e.push(i[t]) : 0 !== i[t] && n[t] && e.push(i[t] = new Promise((function (e, n) { for (var a = "css/" + ({}[t] || t) + "." + { 2: "31d6cfe0", 3: "dc0f8f59", 4: "31d6cfe0", 5: "31d6cfe0" }[t] + ".css", s = u.p + a, o = document.getElementsByTagName("link"), r = 0; r < o.length; r++) { var p = o[r], l = p.getAttribute("data-href") || p.getAttribute("href"); if ("stylesheet" === p.rel && (l === a || l === s)) return e() } var d = document.getElementsByTagName("style"); for (r = 0; r < d.length; r++) { p = d[r], l = p.getAttribute("data-href"); if (l === a || l === s) return e() } var y = document.createElement("link"); y.rel = "stylesheet", y.type = "text/css", y.onload = e, y.onerror = function (e) { var a = e && e.target && e.target.src || s, o = new Error("Loading CSS chunk " + t + " failed.\n(" + a + ")"); o.code = "CSS_CHUNK_LOAD_FAILED", o.request = a, delete i[t], y.parentNode.removeChild(y), n(o) }, y.href = s; var c = document.getElementsByTagName("head")[0]; c.appendChild(y) })).then((function () { i[t] = 0 }))); var a = s[t]; if (0 !== a) if (a) e.push(a[2]); else { var o = new Promise((function (e, n) { a = s[t] = [e, n] })); e.push(a[2] = o); var p, l = document.createElement("script"); l.charset = "utf-8", l.timeout = 120, u.nc && l.setAttribute("nonce", u.nc), l.src = r(t); var d = new Error; p = function (e) { l.onerror = l.onload = null, clearTimeout(y); var n = s[t]; if (0 !== n) { if (n) { var a = e && ("load" === e.type ? "missing" : e.type), i = e && e.target && e.target.src; d.message = "Loading chunk " + t + " failed.\n(" + a + ": " + i + ")", d.name = "ChunkLoadError", d.type = a, d.request = i, n[1](d) } s[t] = void 0 } }; var y = setTimeout((function () { p({ type: "timeout", target: l }) }), 12e4); l.onerror = l.onload = p, document.head.appendChild(l) } return Promise.all(e) }, u.m = t, u.c = a, u.d = function (t, e, n) { u.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n }) }, u.r = function (t) { "undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, u.t = function (t, e) { if (1 & e && (t = u(t)), 8 & e) return t; if (4 & e && "object" === typeof t && t && t.__esModule) return t; var n = Object.create(null); if (u.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var a in t) u.d(n, a, function (e) { return t[e] }.bind(null, a)); return n }, u.n = function (t) { var e = t && t.__esModule ? function () { return t["default"] } : function () { return t }; return u.d(e, "a", e), e }, u.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, u.p = "/", u.oe = function (t) { throw console.error(t), t }; var p = window["webpackJsonp"] = window["webpackJsonp"] || [], l = p.push.bind(p); p.push = e, p = p.slice(); for (var d = 0; d < p.length; d++)e(p[d]); var y = l; o.push([0, 0]), n() })({ 0: function (t, e, n) { t.exports = n("2f39") }, "0047": function (t, e, n) { }, "0af5": function (t) { t.exports = JSON.parse('[{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall.Call[]","name":"calls","type":"tuple[]"}],"name":"aggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"}]') }, 1: function (t, e) { }, "238c": function (t) { t.exports = JSON.parse('[{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsIn","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"reserveA","type":"uint256"},{"internalType":"uint256","name":"reserveB","type":"uint256"}],"name":"quote","outputs":[{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapETHForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokensSupportingFeeOnTransferTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETHSupportingFeeOnTransferTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"}]') }, "2cb4": function (t) { t.exports = JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"adr","type":"address"}],"name":"Authorized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"adr","type":"address"}],"name":"Unauthorized","type":"event"},{"inputs":[],"name":"BUSD","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BUSD_ZAP_TAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIBERAMINER","outputs":[{"internalType":"contract ILiberaMiners","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROUTERLIBERA","outputs":[{"internalType":"contract IUniswapV2Router","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"_PAUSED","type":"bool"}],"name":"SET_PAUSED","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"TAKE_FEE","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"THOREUM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"THOREUMBNB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"THOREUMTOKEN","outputs":[{"internalType":"contract ILibera","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WBNB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"XLIBERAMINTER","outputs":[{"internalType":"contract IxLiberaMinter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"XTHOREUM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"authorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"breakLP","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getStuckToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"isAuthorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tax","type":"uint256"},{"internalType":"bool","name":"_TAKE_FEE","type":"bool"}],"name":"setBUSD_ZAP_TAX","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_miner","type":"address"}],"name":"setLiberaMiner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_minter","type":"address"},{"internalType":"address","name":"_xThoreum","type":"address"}],"name":"setLiberaMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"address","name":"route","type":"address"}],"name":"setRoutePairAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"adr","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"targetToken","type":"address"}],"name":"unZapToToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"unauthorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"liberaAmount","type":"uint256"},{"internalType":"address","name":"_ref","type":"address"}],"name":"userAddLiquidityAndDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"liberaAmount","type":"uint256"}],"name":"userAddLiquidityAndDepositForBank","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bool","name":"_deposit","type":"bool"},{"internalType":"address","name":"_ref","type":"address"},{"internalType":"bool","name":"_miner","type":"bool"}],"name":"zapBNBToLP","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"_deposit","type":"bool"},{"internalType":"address","name":"_ref","type":"address"},{"internalType":"bool","name":"_miner","type":"bool"}],"name":"zapThoreumToLP","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"_ref","type":"address"},{"internalType":"bool","name":"_deposit","type":"bool"},{"internalType":"bool","name":"_miner","type":"bool"}],"name":"zapTokenToLP","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]') }, "2e6a": function (t) { t.exports = JSON.parse('[{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]') }, "2f39": function (t, e, n) { "use strict"; n.r(e); var a = {}; n.r(a), n.d(a, "getAccount", (function () { return _ })), n.d(a, "isLogon", (function () { return C })); var i = {}; n.r(i), n.d(i, "set_login", (function () { return B })), n.d(i, "set_logout", (function () { return x })); var s = {}; n.r(s), n.d(s, "connect", (function () { return E })), n.d(s, "disconnect", (function () { return F })); var o = {}; n.r(o), n.d(o, "getToken", (function () { return $ })), n.d(o, "getTokenInfo", (function () { return O })), n.d(o, "getZapTokens", (function () { return D })), n.d(o, "getZapToken", (function () { return N })), n.d(o, "getZapInfo", (function () { return R })), n.d(o, "getWealthPoolBySlug", (function () { return U })), n.d(o, "getWealthPool", (function () { return W })); var r = {}; n.r(r), n.d(r, "set_tokenInfo", (function () { return z })), n.d(r, "set_tokens", (function () { return Q })), n.d(r, "set_zapInfo", (function () { return H })), n.d(r, "set_zapTokens", (function () { return j })), n.d(r, "set_wealthPools", (function () { return Z })), n.d(r, "set_wealthHistory", (function () { return V })); var u = {}; n.r(u), n.d(u, "fetchUserTokenInfo", (function () { return rt })), n.d(u, "fetchZapInfo", (function () { return ut })), n.d(u, "fetchAllData", (function () { return pt })), n.d(u, "approveToken", (function () { return lt })), n.d(u, "getBlockTime", (function () { return dt })), n.d(u, "writeZapContract", (function () { return yt })), n.d(u, "writeMinerContract", (function () { return ct })), n.d(u, "getMinerAddLPQuote", (function () { return mt })), n.d(u, "getWealthRetro", (function () { return bt })), n.d(u, "fetchWealthPools", (function () { return ht })), n.d(u, "writeWealthContract", (function () { return Tt })), n.d(u, "writeZapWealthContract", (function () { return ft })); n("5319"), n("7d6e"), n("e54f"), n("c382"), n("4848"), n("985d"), n("0047"); var p = n("2b0e"), l = n("1f91"), d = n("42d2"), y = n("b05d"), c = n("515f"), m = n("9c64"), b = n("2a19"); p["a"].use(y["a"], { config: { dark: !0, notify: { color: "negative", badgeColor: "indigo-8", badgeTextColor: "white", timeout: 1e4, html: !0, classes: "text-body1", position: "bottom-right" } }, lang: l["a"], iconSet: d["a"], plugins: { Cookies: c["a"], Meta: m["a"], Notify: b["a"] } }); var h = function () { var t = this, e = t._self._c; return e("div", { attrs: { id: "q-app" } }, [e("router-view")], 1) }, T = [], f = { name: "App" }, w = f, g = n("2877"), k = Object(g["a"])(w, h, T, !1, null, null, null), v = k.exports, M = n("2f62"), P = function () { return { address: "" } }; function _(t) { return t.address } function C(t) { return "" !== t.address } function B(t, e) { t.address = e } function x(t) { t.address = "" } n("14d9"); var A = n("c0d8"), L = n.n(A); async function E({ commit: t, dispatch: e }, n) { window.Provider = n, window.Blockchain = new L.a(n); let a = await window.Blockchain.eth.getAccounts(), i = await window.Blockchain.eth.getChainId(); if (i === parseInt(56)) t("set_login", a[0]), e("token/fetchAllData", a[0], { root: !0 }), dataLayer && dataLayer.push({ event: "Connect_wallet_success" }); else try { let t = p["a"].prototype.$networkItems.find((t => t.chainId === parseInt(56))), { chainName: e, chainId: n, rpcUrls: a, iconUrls: i, nativeCurrency: s, blockExplorerUrls: o } = t; await window.ethereum.request({ method: "wallet_addEthereumChain", params: [{ chainId: L.a.utils.toHex(n), chainName: e, rpcUrls: a, iconUrls: i, nativeCurrency: s, blockExplorerUrls: o }] }) } catch (s) { b["a"].create({ message: "Please switch to BSC-MAINNET Network", color: "orange" }) } n.on("chainChanged", (n => { parseInt(n.toString()) === parseInt(56) ? (t("set_login", a[0]), e("token/fetchAllData", a[0], { root: !0 })) : b["a"].create({ message: "Please switch to BSC-MAINNET Network", color: "orange" }) })), n.on("accountsChanged", (n => { t("set_login", n[0]), e("token/fetchAllData", n[0], { root: !0 }), dataLayer && dataLayer.push({ event: "Connect_wallet_success" }) })) } async function F({ commit: t }) { t("set_logout"), window.Provider && (window.Provider.close && await window.Provider.close(), window.Provider.clearCachedProvider && window.Provider.clearCachedProvider(), localStorage.removeItem("WEB3_CONNECT_CACHED_PROVIDER"), window.Provider = null) } var S = { namespaced: !0, getters: a, mutations: i, actions: s, state: P }, q = { tokenInfo: { isNotMigrating: "", isBreakerEnable: "", isFeesOnNormalTransfers: "", isRewardBiggestBuyer: "", lpNukeEnabled: "", breakerPercent: "", breakerPeriod: "", breakerBuyFee: "", breakerSellFee: "", busdToken: "", marketingWallet: "", reserveTreasury: "", circulatingSupply: "", totalSupply: "", launchTime: "", getPeriod: "", biggestBuyerPeriod: "", nukePercentPerSell: "", maxSellTransactionAmount: "", normalTransferFee: "", totalBuyFees: "", totalSellFees: "", liquidityFee: "", marketingFee: "", treasuryFee: "", rewardBuyerFee: "", circuitBreakerFlag: "", circuitBreakerTime: "", totalBiggestBuyerPaid: "", totalNuked: "", totalNukedSupply: "", totalBusdTreasury: "", price: "", marketCap: "", totalBurned: "", totalBurnedFiat: "", totalBurnSupply: "", nextBurnDate: "", nextBurnAmount: "", nextBurnAmountFiat: "", nextBurnSupply: "", liquidityBalance: "", liquidityBalanceFiat: "", taxTreasury: "", taxTreasuryFiat: "", nukeTreasuryBalance: "", busdTreasuryBalance: "", currentRewardBnb: "", totalValueLocked: "", allTimeHigh: "", totalVolume: "", priceChangePercent: "", totalHolder: "", balance: "", balanceFiat: "", wrapAllowance: "", unwrapAllowance: "" }, token: { address: "", symbol: "", icon: "", decimal: 18, balance: "" }, zapToken: { address: "", zap: "", pair: "", method: "", zapFix: 1 }, zapInfo: { address: "", symbol: "", icon: "", decimal: 18, totalSupply: "", reserve0: "", reserve1: "", thoreumPerLP: "", bnbPerLP: "", balance: "", allowance: "" }, wealthPool: { allowance: "", balance: "", depositToken: "", depositTokenPrice: 0, devPercentage: "", compoundPercentage: "", collectPercentage: "", icon: "", isPaused: !0, isRetroMode: !1, isRefPromotion: !1, maxEarningPercentage: "", minInvest: "", name: "", poolAddress: "", refPercentage: "", slug: "", startBlock: 0, startDate: 0, walletDepositLimit: "", periodDays: [], dividendPeriodList: [], tvlHistory: [], dayFromLaunch: 1, countDeposited: 0, totalStaked: 0, totalStakedFiat: 0, contractBalance: 0, contractBalanceFiat: 0, contractBalanceFiatBusd: 0, totalDeposited: 0, totalDepositedFiat: 0, totalWithdrawn: 0, totalWithdrawnFiat: 0, totalWithdrawnFiatBusd: 0, totalCompound: 0, totalCompoundFiat: 0, totalCompoundFiatBusd: 0, maxDay: 0, countUser: 0, zapAddress: "", zapTokens: [], userDivs: "", userDivsFiat: 0, userDivsFiatBusd: 0, userKeyCounter: "", userLastWith: "", userRef: "", userRefCount: 0, userRefWithdrawn: "", userRefWithdrawnFiat: 0, userRefWithdrawnFiatBusd: 0, userRefBonus: "", userRefBonusFiat: 0, userRefBonusFiatBusd: 0, userStartDate: "", userTotalInits: "", userTotalInitsFiat: 0, userTotalInitsFiatBusd: 0, userTotalWiths: "", userTotalWithdrawable: "", userTotalWithdrawableFiat: 0, userTotalWithdrawableFiatBusd: 0, userTotalEarnPercentage: 0, userTotalEarn: 0, userTotalEarnFiat: 0, userTotalEarnFiatBusd: 0, userSharePercentage: 0, userDepositList: [] }, wealthDeposit: { poolAddress: "", key: "", amount: "", amountFiat: 0, depositTime: "", isInitialWithdrawn: "", withdrawn: "", withdrawnFiat: "", withdrawnFiatBusd: "", earned: "", earnedFiat: "", earnedFiatBusd: "", dayPassed: "" } }, I = function () { return { tokens: [], tokenInfo: q.tokenInfo, zapInfo: q.zapInfo, zapTokens: [], wealthPools: [] } }; function $(t) { return e => t.tokens.find((t => t.address.toLowerCase() === e.toLowerCase())) || q.token } function O(t) { return t.tokenInfo } function D(t) { return t.zapTokens } function N(t) { return e => t.zapTokens.find((t => t.address.toLowerCase() === e.toLowerCase())) } function R(t) { return t.zapInfo } function U(t) { return e => t.wealthPools.find((t => t.slug.toLowerCase() === e.toLowerCase())) || q.wealthPool } function W(t) { return e => t.wealthPools.find((t => t.poolAddress.toLowerCase() === e.toLowerCase())) || q.wealthPool } function z(t, e) { t.tokenInfo = { ...q.tokenInfo, ...t.tokenInfo, ...e } } function Q(t, e) { t.tokens = [...e.map((t => ({ ...q.token, ...t })))] } function H(t, e) { t.zapInfo = { ...q.zapInfo, ...e } } function j(t, e) { t.zapTokens = [...e.map((t => ({ ...q.zapToken, ...t })))] } function Z(t, e) { t.wealthPools = [...e.map((t => ({ ...q.wealthPool, ...t })))] } function V(t, e) { t.wealthHistory = [...e.map((t => ({ ...q.wealthHistory, ...t })))] } var J = n("bc3a"), X = n.n(J), G = n("a807"), Y = n("c030"); const K = () => { if (!window.ReadProvider) { let t = new L.a.providers.HttpProvider(p["a"].prototype.getRPCUrl(), { timeout: 1e4 }); window.ReadProvider = new L.a(t) } return window.ReadProvider }; function tt({ address: t, abi: e }) { let n = K(); return new n.eth.Contract(e, t) } function et({ address: t, abi: e }) { if (window.Blockchain) { let n = new L.a(window.Blockchain); return new n.eth.Contract(e, t) } } async function nt(t, e) { let n = tt(p["a"].prototype.$contracts.multiCall), a = new G["b"](t); const i = e.map((t => [t.address.toLowerCase(), a.encodeFunctionData(t.name, t.params)])), { returnData: s } = await n.methods["aggregate"](i).call(); return s.map(((t, n) => a.decodeFunctionResult(e[n].name, t))) } async function at() { let t = K(); return await t.eth.getBlock("latest") } async function it(t) { let e = K(), n = await e.eth.getBalance(t); return parseFloat(Y["a"].utils.formatEther(n)) } async function st(t, e) { try { let n = t.map((t => ({ address: t.address, name: "balanceOf", params: [e] }))); return await nt(p["a"].prototype.$contracts.dexPair.abi, n).then((e => e.map(((e, n) => ({ ...t[n], balance: parseFloat(Y["a"].utils.formatUnits(e[0].toString(), t[n].decimal)) }))))) } catch (n) { return console.log("_fetchUserTokenBalances->Error", n), t } } async function ot(t, e, n = [], a = []) { try { let i = [], s = 0; n = n.map(((t, e) => (t.arrIndex = e, t))); let o = n.filter((t => "ETHER" !== t.address)); o.forEach((n => { let a = [{ address: n.address, name: "balanceOf", params: [t] }, { address: n.address, name: "allowance", params: [t, e] }]; i.push(...a), s = a.length })), i.length > 0 && await nt(p["a"].prototype.$contracts.dexPair.abi, i).then((t => { o.forEach(((e, i) => { let o = a.find((t => t.address.toLowerCase() === e.address.toLowerCase())), { arrIndex: r, ...u } = e; n[r] = { ...o, ...u, balance: parseFloat(Y["a"].utils.formatEther(t[i * s][0])), allowance: parseFloat(Y["a"].utils.formatEther(t[i * s + 1][0])) } })) })); let r = n.find((t => "ETHER" === t.address)), u = a.find((t => t.address.toLowerCase() === p["a"].prototype.$contracts.networkToken.address.toLowerCase())); if (r && u) { let e = u.price, a = await it(t); n[r.arrIndex] = { ...r, balance: a, price: e, allowance: Y["a"].constants.MaxUint256.toString() } } return n } catch (i) { console.log("_fetchUserZapTokens->Error", i) } } async function rt(t) { try { let e = [{ address: p["a"].prototype.$contracts.mainToken.address, name: "balanceOf", params: [t] }]; return await nt(p["a"].prototype.$contracts.dexPair.abi, e).then((t => ({ balance: Y["a"].utils.formatEther(t[0][0].toString()) }))) } catch (e) { console.log("fetchUserTokenInfo->Error", e) } } async function ut(t, e, n, a, i) { try { let a = [{ address: t.pair, name: "totalSupply", params: [] }, { address: t.pair, name: "getReserves", params: [] }]; i && a.push({ address: t.pair, name: "balanceOf", params: [i] }, { address: t.pair, name: "allowance", params: [i, t.address] }), await nt(p["a"].prototype.$contracts.dexPair.abi, a).then((e => { let n = parseFloat(Y["a"].utils.formatEther(e[0][0])), a = parseFloat(Y["a"].utils.formatEther(e[1]["_reserve0"])), s = parseFloat(Y["a"].utils.formatEther(e[1]["_reserve1"])), o = s / n, r = a / n, u = i ? parseFloat(Y["a"].utils.formatEther(e[2][0])) : "", p = i ? parseFloat(Y["a"].utils.formatEther(e[3][0])) : ""; t = { ...t, totalSupply: n, reserve0: a, reserve1: s, balance: u, allowance: p, thoreumPerLP: o, bnbPerLP: r } })); let s = [], o = e.find((t => "ETHER" === t.address)); if (o) { let t = n.find((t => t.address.toLowerCase() === p["a"].prototype.$contracts.networkToken.address.toLowerCase())), e = t.price, a = 0; i && (a = await it(i)), s.push({ ...o, decimal: 18, symbol: "BNB", icon: "https://storage.googleapis.com/thor2-cdn/public/coins/BNB.png", balance: a, price: e, allowance: Y["a"].constants.MaxUint256.toString() }) } let r = e.filter((t => "ETHER" !== t.address)).map((t => (t.address = t.address.toLowerCase(), t))); if (r.length > 0) { let e = []; if (i) { let a = [], s = 0; r.forEach((e => { let n = [{ address: e.address, name: "balanceOf", params: [i] }, { address: e.address, name: "allowance", params: [i, t.address] }]; a.push(...n), s = n.length })), await nt(p["a"].prototype.$contracts.dexPair.abi, a).then((t => { r.forEach(((a, i) => { let o = n.find((t => t.address.toLowerCase() === a.address.toLowerCase())); e.push({ address: a.address, balance: Y["a"].utils.formatUnits(t[i * s][0], o.decimal), allowance: Y["a"].utils.formatUnits(t[i * s + 1][0], o.decimal) }) })) })) } r.forEach((t => { let a = n.find((e => e.address.toLowerCase() === t.address.toLowerCase())), i = e.find((e => e.address.toLowerCase() === t.address.toLowerCase())), o = { ...t, ...a, ...i }; s.push(o) })) } return { zapInfo: t, zapTokens: s } } catch (s) { console.log("fetchZapInfo->Error", s || s) } } async function pt({ commit: t, dispatch: e }, n) { try { let e = n ? "/api/farm/v1?userAddress=" + n : "/api/farm/v1", a = await X.a.get(e), { tokens: i = [], tokenInfo: s = {}, zapInfo: o = {}, zapList: r = [], wealthPools: u = [] } = a.data.data, { rewardItems: p, ...l } = s; if (n) { i = await st(i, n); let { balance: t, ...e } = await rt(n, { tokenInfo: l }); l.balance = t, l.balanceFiat = l.balance * l.price, l = { ...l, ...e }, u = await ht(u, n, i) } if (t("set_tokens", i), t("set_tokenInfo", l), t("set_wealthPools", u), o.address) { let e = await ut(o, r, i, l, n); t("set_zapInfo", e.zapInfo), t("set_zapTokens", e.zapTokens) } } catch (a) { console.log("fetchAllData->Error", a.message || a) } } async function lt({ commit: t }, { account: e, token: n, spender: a }) { try { let t = p["a"].prototype.$contracts.dexPair.abi, i = et({ address: n, abi: t }); return i.methods["approve"](a, Y["a"].constants.MaxUint256).send({ from: e }) } catch (i) { console.log("approveToken->Error", i.message || i) } } async function dt({ }) { try { let t = await at(); return t.timestamp } catch (t) { console.log("getBlockTime->Error", t) } } async function yt({ commit: t }, { action: e, account: n, amount: a, amountToken0: i, amountToken1: s, fromToken: o, targetToken: r, lpPair: u, zapContract: l, referral: d = "0x0000000000000000000000000000000000000000", isDeposit: y = !1, isMiner: c = !0, decimal: m = 18 }) { try { if (n) { let t = et({ address: l, abi: p["a"].prototype.$contracts.zapContract.abi }), b = a ? Y["a"].utils.parseUnits(a.toString(), m).toString() : void 0, h = i ? Y["a"].utils.parseUnits(i.toString(), m).toString() : void 0, T = s ? Y["a"].utils.parseUnits(s.toString(), m).toString() : void 0, f = { zapBNBToLP: [y, d, c], zapTokenToLP: [o, b, d, y, c], zapThoreumToLP: [b, y, d, c], breakLP: [u, b], unZapToToken: [b, r], userAddLiquidityAndDeposit: [T, d], userAddLiquidityAndDepositForBank: [n, T] }, w = { from: n }; return "zapBNBToLP" === e ? w.value = b : "userAddLiquidityAndDeposit" === e && (w.value = h), t.methods[e](...f[e]).send(w) } return Promise.reject("Please connect wallet") } catch (b) { throw console.log("writeZapContract->Error", e), b } } async function ct({ commit: t }, { action: e, account: n, amount: a, minerPool: i, referral: s = "0x0000000000000000000000000000000000000000", decimal: o = 18 }) { try { if (n) { let t = et({ address: i, abi: p["a"].prototype.$contracts.minerPool.abi }), r = a ? Y["a"].utils.parseUnits(a.toString(), o).toString() : void 0, u = { buyEggs: [n, s, r], compoundEggs: [], sellEggs: [], ADD_AUTOMATE: [], REMOVE_AUTOMATE: [], getFree1LP: [], buyForWinItNow: [n, s] }; return t.methods[e](...u[e]).send({ from: n }) } return Promise.reject("Please connect wallet") } catch (r) { console.log("writeMinerContract->Error", r) } } async function mt({ commit: t }, { dexRouter: e, token0Address: n, token1Address: a, amountToken0: i, amountToken1: s, decimal: o = 18 }) { let r = i ? Y["a"].utils.parseUnits(i.toString(), o).toString() : void 0, u = s ? Y["a"].utils.parseUnits(s.toString(), o).toString() : void 0, l = i ? "getAmountsOut" : "getAmountsIn", d = i ? [r, [n, a]] : [u, [n, a]], y = [{ address: e, name: l, params: d }]; return await nt(p["a"].prototype.$contracts.dexRouter.abi, y).then((t => i ? Y["a"].utils.formatUnits(t[0]["amounts"][1], o) : Y["a"].utils.formatUnits(t[0]["amounts"][0], o))) } async function bt({ commit: t }, { wealthPool: e, amount: n, days: a = [] }) { try { let t = Y["a"].utils.parseEther(n.toString()).toString(), i = []; return a.forEach((n => { i.push({ address: e, name: "Retro", params: [t, n] }) })), await nt(p["a"].prototype.$contracts.wealthPool.abi, i).then((t => a.map(((e, n) => ({ period: e, earn: parseFloat(Y["a"].utils.formatEther(t[n][0])) }))))) } catch (i) { console.log("getWealthRetro->Error", i) } } async function ht(t, e, n) { try { if (e) { let a = [], i = 0; t.forEach((t => { let n = [{ address: t.poolAddress, name: "UsersKey", params: [e] }, { address: t.poolAddress, name: "userInfo", params: [e] }, { address: t.poolAddress, name: "calcdiv", params: [e] }, { address: t.poolAddress, name: "getUserPercentage", params: [e] }]; a.push(...n), i = n.length })), await nt(p["a"].prototype.$contracts.wealthPool.abi, a).then((e => { t.forEach(((n, a) => { let { poolAddress: s } = n, o = parseInt(e[a * i]["startDate"]), r = parseFloat(Y["a"].utils.formatEther(e[a * i]["divs"])), u = parseFloat(Y["a"].utils.formatEther(e[a * i]["refBonus"])), p = parseFloat(Y["a"].utils.formatEther(e[a * i]["totalInits"])), l = parseFloat(Y["a"].utils.formatEther(e[a * i]["totalWiths"])), d = parseInt(e[a * i]["lastWith"]), y = parseInt(e[a * i]["keyCounter"]), c = e[a * i]["ref"], m = parseInt(e[a * i]["refCount"]), b = parseFloat(Y["a"].utils.formatEther(e[a * i]["refWithdrawn"])), h = e[a * i + 1]["depoList"].map((t => { let e = parseFloat(Y["a"].utils.formatEther(t["amt"])), a = parseFloat(Y["a"].utils.formatEther(t["withdrawnAmt"])), i = parseInt(t["depoTime"]), o = t["initialWithdrawn"], r = parseInt(t["key"]); o && (a = e + a); let u = e * n.lpPriceBnb, p = a * n.lpPriceBnb, l = a * n.depositTokenPrice; i < n.startDate && (i = n.startDate); let d = Math.floor(((new Date).getTime() / 1e3 - i) / 86400) + 1; return { ...q.wealthDeposit, poolAddress: s, key: r, amount: e, amountFiat: u, withdrawn: a, withdrawnFiat: p, withdrawnFiatBusd: l, depositTime: i, isInitialWithdrawn: o, dayPassed: d } })), T = parseFloat(Y["a"].utils.formatEther(e[a * i + 2][0])), f = parseInt(e[a * i + 3][0]) / 100, w = T + r, g = 100 * w / p; t[a] = { ...n, userStartDate: o, userDivs: r, userRefBonus: u, userTotalInits: p, userTotalWiths: l, userLastWith: d, userKeyCounter: y, userRef: c, userRefCount: m, userRefWithdrawn: b, userDepositList: h, userTotalWithdrawable: T, userTotalEarn: w, userTotalEarnPercentage: g, userSharePercentage: f } })) })); for (let n = 0; n < t.length; n++) { let a = t[n], { poolAddress: i, userDepositList: s, depositTokenPrice: o, lpPriceBnb: r } = a, u = s.map((t => ({ address: i, name: "calculateEarningsForUserKey", params: [e, t.key] }))); u.length > 0 && await nt(p["a"].prototype.$contracts.wealthPool.abi, u).then((e => { s.forEach(((a, i) => { let s = parseFloat(Y["a"].utils.formatEther(e[i][0])); t[n].userDepositList[i].earned = s, t[n].userDepositList[i].earnedFiat = s * r, t[n].userDepositList[i].earnedFiatBusd = s * o })) })) } a = [], i = 0, t.forEach((t => { let n = [{ address: t.depositToken, name: "balanceOf", params: [e] }, { address: t.depositToken, name: "allowance", params: [e, t.poolAddress] }]; a.push(...n), i = n.length })), await nt(p["a"].prototype.$contracts.dexPair.abi, a).then((e => { t.forEach(((n, a) => { t[a].balance = parseFloat(Y["a"].utils.formatEther(e[a * i][0])), t[a].allowance = parseFloat(Y["a"].utils.formatEther(e[a * i + 1][0])) })) })); for (let s = 0; s < t.length; s++)t[s].zapAddress && (t[s].zapTokens = await ot(e, t[s].zapAddress, t[s].zapTokens, n)); for (let e = 0; e < t.length; e++) { let n = t[e], { depositTokenPrice: a, lpPriceBnb: i, userTotalWithdrawable: s, userTotalInits: o, userRefBonus: r, userDivs: u, userRefWithdrawn: p, userTotalEarn: l } = n; t[e].userTotalWithdrawableFiat = s * i, t[e].userTotalWithdrawableFiatBusd = s * a, t[e].userTotalInitsFiat = o * i, t[e].userTotalInitsFiatBusd = o * a, t[e].userRefBonusFiat = r * i, t[e].userRefBonusFiatBusd = r * a, t[e].userDivsFiat = u * i, t[e].userDivsFiatBusd = u * a, t[e].userRefWithdrawnFiat = p * i, t[e].userRefWithdrawnFiatBusd = p * a, t[e].userTotalEarnFiat = l * i, t[e].userTotalEarnFiatBusd = l * a } return t } } catch (a) { console.log("fetchWealthPools->Error", a) } } async function Tt({ commit: t }, { action: e, account: n, amount: a, wealthPool: i, key: s, targetToken: o, referral: r = "0x0000000000000000000000000000000000000000", decimal: u = 18 }) { try { if (n) { let t = et({ address: i, abi: p["a"].prototype.$contracts.wealthPool.abi }), l = a ? Y["a"].utils.parseUnits(a.toString(), u).toString() : void 0, d = { stake: [l, r], withdrawDivs: [], withdrawInitial: [s], withdrawRefBonus: [], compound: [], withdrawDivsToToken: [o], unStakeToToken: [s, o] }; return t.methods[e](...d[e]).send({ from: n }) } return Promise.reject("Please connect wallet") } catch (l) { console.log("writeWealthContract->Error", l) } } async function ft({ commit: t }, { action: e, account: n, amount: a, amountToken0: i, amountToken1: s, fromToken: o, targetToken: r, lpPair: u, zapContract: l, referral: d = "0x0000000000000000000000000000000000000000", isDeposit: y = !1, isMiner: c = !0, decimal: m = 18 }) { try { if (n) { let t = et({ address: l, abi: p["a"].prototype.$contracts.zapWealthContract.abi }), b = a ? Y["a"].utils.parseUnits(a.toString(), m).toString() : void 0, h = i ? Y["a"].utils.parseUnits(i.toString(), m).toString() : void 0, T = s ? Y["a"].utils.parseUnits(s.toString(), m).toString() : void 0, f = { zapBNBToLP: [y, d, c], zapTokenToLP: [o, b, d, y, c], zapThoreumToLP: [b, y, d, c], breakLP: [u, b], unZapToToken: [b, r], userAddLiquidityAndDeposit: [T, d], userAddLiquidityAndDepositForBank: [n, T] }, w = { from: n }; return "zapBNBToLP" === e ? w.value = b : "userAddLiquidityAndDeposit" === e && (w.value = h), t.methods[e](...f[e]).send(w) } return Promise.reject("Please connect wallet") } catch (b) { throw console.log("writeZapContract->Error", e), b } } var wt = { namespaced: !0, getters: o, mutations: r, actions: u, state: I }; p["a"].use(M["a"]); var gt = function () { return new M["a"].Store({ modules: { auth: S, token: wt }, strict: !1 }) }, kt = n("8c4f"); const vt = [{ path: "/", component: () => Promise.all([n.e(0), n.e(2)]).then(n.bind(null, "2710")), children: [{ path: "/app", component: () => Promise.all([n.e(0), n.e(4)]).then(n.bind(null, "ec95")) }, { path: "/", component: () => Promise.all([n.e(0), n.e(3)]).then(n.bind(null, "d725")) }] }, { path: "*", component: () => n.e(5).then(n.bind(null, "e51e")) }]; var Mt = vt; p["a"].use(kt["a"]); var Pt = function () { return new kt["a"]({ scrollBehavior: () => ({ x: 0, y: 0 }), routes: Mt, mode: "history", base: "/" }) }, _t = async function () { const t = "function" === typeof gt ? await gt({ Vue: p["a"] }) : gt, e = "function" === typeof Pt ? await Pt({ Vue: p["a"], store: t }) : Pt; t.$router = e; const n = { router: e, store: t, render: t => t(v), el: "#q-app" }; return { app: n, store: t, router: e } }, Ct = n("a925"), Bt = {}, xt = { en: Bt }; p["a"].use(Ct["a"]); const At = new Ct["a"]({ locale: "en", fallbackLocale: "en", messages: xt }); var Lt = ({ app: t }) => { t.i18n = At }, Et = async ({ Vue: t }) => { X.a.defaults.baseURL = "https://apiv3.thoreum.capital", t.prototype.$axios = X.a }, Ft = function () { var t = this, e = t._self._c; return e("q-card", { staticClass: "bg-blue-grey-2", staticStyle: { width: "550px" } }, [e("q-toolbar", { staticClass: "bg-grey-6 text-black" }, [e("q-toolbar-title", [t._v(t._s(t.$t("User Info")))]), e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], attrs: { dense: "", icon: "far fa-times-circle", round: "", unelevated: "" } })], 1), e("q-card-section", [e("div", { staticClass: "rounded-borders bg-grey-2 q-pa-md" }, [e("div", { staticClass: "row q-col-gutter-md" }, [e("div", { staticClass: "col-xs-12 col-sm-grow" }, [e("div", { staticClass: "text-h6 text-dark" }, [t._v("\n            " + t._s(t.accountText) + "\n          ")]), e("a", { staticClass: "text-blue-9 text-body2", attrs: { href: t.scanLink, target: "_blank" } }, [t._v(t._s(t.$t("View on BscScan")) + "\n            "), e("q-icon", { attrs: { name: "fas fa-external-link-alt" } })], 1)]), e("div", { staticClass: "col-xs-12 col-sm-auto" }, [e("div", { staticClass: "column q-col-gutter-y-sm" }, [e("div", { staticClass: "col" }, [e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], staticClass: "fit", attrs: { label: t.$t("Dashboard"), color: "blue-8", icon: "dashboard", "no-caps": "", size: "lg", "text-color": "white", to: "/app", unelevated: "" } })], 1), e("div", { staticClass: "col" }, [e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], staticClass: "fit", attrs: { label: t.$t("Logout"), color: "negative", icon: "logout", "no-caps": "", size: "lg", "text-color": "white", unelevated: "" }, on: { click: t.disconnect } })], 1)])])])])])], 1) }, St = [], qt = { computed: { ...Object(M["b"])({ getAccountAddress: "auth/getAccount" }), accountText() { return this.shortAddress(this.getAccountAddress, 6) }, scanLink() { return this.getScanLink(this.getAccountAddress) } }, methods: { disconnect() { this.$store.dispatch("auth/disconnect") } } }, It = qt, $t = n("f09f"), Ot = n("65c6"), Dt = n("6ac5"), Nt = n("9c40"), Rt = n("a370"), Ut = n("0016"), Wt = n("7f67"), zt = n("eebe"), Qt = n.n(zt), Ht = Object(g["a"])(It, Ft, St, !1, null, null, null), jt = Ht.exports; Qt()(Ht, "components", { QCard: $t["a"], QToolbar: Ot["a"], QToolbarTitle: Dt["a"], QBtn: Nt["a"], QCardSection: Rt["a"], QIcon: Ut["a"] }), Qt()(Ht, "directives", { ClosePopup: Wt["a"] }); var Zt = function () { var t = this, e = t._self._c; return e("q-card", { staticClass: "grow-box-2", staticStyle: { width: "550px" } }, [e("q-toolbar", [e("q-toolbar-title", [t._v(t._s(t.$t("Collect Reward")))]), e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], attrs: { dense: "", icon: "close", round: "", unelevated: "" } })], 1), e("q-card-section", [e("p", [t._v(t._s(t.$t("Choose your target token")) + ":")]), e("q-list", [e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doCollectBnb } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.tokenBnb.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.tokenBnb.symbol) + "\n          ")])], 1)], 1), e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doCollectToken1 } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.token1.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.token1.symbol) + "\n          ")])], 1)], 1), e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doCollectLP } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.wealthPool.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.wealthPool.name) + " LP\n          ")])], 1)], 1), e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doCollectTokens } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.wealthPool.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.tokenBnb.symbol) + " & " + t._s(t.token1.symbol) + "\n          ")])], 1)], 1)], 1)], 1)], 1) }, Vt = [], Jt = { props: { item: { type: Object, required: !0, default: () => ({ poolAddress: "" }) } }, data() { return { isCollecting: !1 } }, computed: { ...Object(M["b"])({ isLogon: "auth/isLogon", getAccount: "auth/getAccount", getWealthPool: "token/getWealthPool" }), wealthPool() { return JSON.parse(JSON.stringify(this.getWealthPool(this.item.poolAddress))) }, tokenBnb() { return this.wealthPool.zapTokens.find((t => "ether" === t.address.toLowerCase())) }, token1() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token1"].toLowerCase())) }, token0() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token0"].toLowerCase())) }, tokenLP() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["depositToken"].toLowerCase())) } }, methods: { doCollectBnb() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "withdrawDivsToToken", wealthPool: this.wealthPool.poolAddress, targetToken: this.wealthPool["token0"] }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) }, doCollectToken1() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "withdrawDivsToToken", wealthPool: this.wealthPool.poolAddress, targetToken: this.wealthPool["token1"] }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) }, doCollectLP() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "withdrawDivsToToken", wealthPool: this.wealthPool.poolAddress, targetToken: this.wealthPool.depositToken }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) }, doCollectTokens() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "withdrawDivsToToken", wealthPool: this.wealthPool.poolAddress, targetToken: "0x0000000000000000000000000000000000000000" }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) } } }, Xt = Jt, Gt = n("1c1c"), Yt = n("66e5"), Kt = n("4074"), te = n("cb32"), ee = n("068f"), ne = n("0170"), ae = Object(g["a"])(Xt, Zt, Vt, !1, null, null, null), ie = ae.exports; Qt()(ae, "components", { QCard: $t["a"], QToolbar: Ot["a"], QToolbarTitle: Dt["a"], QBtn: Nt["a"], QCardSection: Rt["a"], QList: Gt["a"], QItem: Yt["a"], QItemSection: Kt["a"], QAvatar: te["a"], QImg: ee["a"], QItemLabel: ne["a"] }), Qt()(ae, "directives", { ClosePopup: Wt["a"] }); var se = function () { var t = this, e = t._self._c; return e("q-card", { staticClass: "grow-box-2", staticStyle: { width: "550px" } }, [e("q-toolbar", [e("q-toolbar-title", [t._v(t._s(t.$t("Deposit to the BNB Garden")))]), e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], attrs: { dense: "", icon: "close", round: "", unelevated: "" } })], 1), e("q-tabs", { attrs: { dense: "", shrink: "", "active-color": "blue", "content-class": "text-caption" }, model: { value: t.currentStep, callback: function (e) { t.currentStep = e }, expression: "currentStep" } }, [e("q-tab", { attrs: { name: "TokenBnb" }, scopedSlots: t._u([{ key: "default", fn: function () { return [e("q-icon", { staticClass: "q-mb-sm", attrs: { size: "26px", name: "img:https://storage.googleapis.com/thor2-cdn/public/coins/BNB.png" } }), t._v("\n        BNB\n      ")] }, proxy: !0 }]) }), e("q-tab", { attrs: { name: "TokenLP" }, scopedSlots: t._u([{ key: "default", fn: function () { return [e("q-icon", { attrs: { size: "40px", name: "img:https://storage.googleapis.com/thor2-cdn/public/coins/THOREUM-BNB.png" } }), t._v("\n        " + t._s(t.wealthPool.name) + " LP\n      ")] }, proxy: !0 }]) }), e("q-tab", { attrs: { name: "Token1" }, scopedSlots: t._u([{ key: "default", fn: function () { return [e("q-icon", { staticClass: "q-mb-sm", attrs: { size: "26px", name: "img:" + t.token1.icon } }), t._v("\n        " + t._s(t.token1.symbol) + "\n      ")] }, proxy: !0 }]) }), e("q-tab", { attrs: { name: "Tokens" }, scopedSlots: t._u([{ key: "default", fn: function () { return [e("q-icon", { attrs: { size: "40px", name: "img:https://storage.googleapis.com/thor2-cdn/public/coins/THOREUM-BNB.png" } }), t._v("\n        " + t._s(t.token1.symbol) + " & " + t._s(t.tokenBnb.symbol) + "\n      ")] }, proxy: !0 }]) })], 1), "Token1" === t.currentStep ? [e("q-card-section", [e("div", { staticClass: "row justify-between" }, [e("div", { staticClass: "col-auto" }, [t._v(t._s(t.token1.symbol))]), e("div", [t._v(t._s(t.$t("Balance")) + ":\n          "), "" === t.token1.balance ? e("span", [t._v("--")]) : e("text-number", { attrs: { amount: t.token1.balance } })], 1)]), e("q-input", { staticClass: "rounded-borders text-body1 bg-black q-pa-sm q-mb-md", attrs: { borderless: "", dense: "", type: "number" }, scopedSlots: t._u([{ key: "append", fn: function () { return [e("q-btn", { staticClass: "q-px-sm", attrs: { dense: "", label: "MAX", outline: "", unelevated: "" }, on: { click: t.doSetMaxToken1 } })] }, proxy: !0 }, { key: "prepend", fn: function () { return [e("q-icon", { attrs: { name: "img:" + t.token1.icon } })] }, proxy: !0 }], null, !1, 4062495787), model: { value: t.payload.amountToken1, callback: function (e) { t.$set(t.payload, "amountToken1", e) }, expression: "payload.amountToken1" } }), t.minThoreum > 0 ? e("div", [e("div", [t._v("- " + t._s(t.$t("Min deposit")) + ": " + t._s(parseFloat(t.minThoreum.toFixed(4)).toLocaleString()) + " " + t._s(t.token1.symbol) + " ($" + t._s(parseFloat((t.minThoreum * t.token1.price).toFixed(2)).toLocaleString()) + ")")])]) : t._e(), t.maxThoreum > 0 ? e("div", [e("div", [t._v("- " + t._s(t.$t("Your max deposit")) + ": " + t._s(parseFloat(t.maxThoreum.toFixed(4)).toLocaleString()) + " " + t._s(t.token1.symbol) + " ($" + t._s(parseFloat((t.maxThoreum * t.token1.price).toFixed(2)).toLocaleString()) + ")")])]) : t._e()], 1), e("q-card-actions", { attrs: { align: "center" } }, [e("div", { staticClass: "row justify-center q-col-gutter-md" }, [e("div", { staticClass: "col-grow" }, [e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], staticClass: "full-width q-px-md", attrs: { outline: "", "no-caps": "" } }, [t._v("Cancel")])], 1), !t.isAllowanceToken1 && t.payload.amountToken1 > 0 ? [e("div", { staticClass: "col-grow" }, [e("q-btn", { staticClass: "full-width q-px-md", attrs: { unelevated: "", "no-caps": "", color: "orange", loading: t.isApproving }, on: { click: t.doApproveToken1 } }, [t._v(t._s(t.$t("Approve")) + " " + t._s(t.token1.symbol))])], 1)] : [e("div", { staticClass: "col-grow" }, [e("q-btn", { staticClass: "full-width q-px-md", class: t.canBuyMinerToken1 ? "bg-blue" : "bg-blue-grey-9", attrs: { unelevated: "", "no-caps": "", outline: !t.canBuyMinerToken1, disable: !t.canBuyMinerToken1, loading: t.isLoading }, on: { click: t.doBuyMinerToken1 } }, [t._v("Confirm\n            ")])], 1)]], 2)])] : "TokenBnb" === t.currentStep ? [e("q-card-section", [e("div", { staticClass: "row justify-between" }, [e("div", { staticClass: "col-auto" }, [t._v(t._s(t.tokenBnb.symbol))]), e("div", [t._v(t._s(t.$t("Balance")) + ":\n          "), "" === t.tokenBnb.balance ? e("span", [t._v("--")]) : e("text-number", { attrs: { amount: t.tokenBnb.balance } })], 1)]), e("q-input", { staticClass: "rounded-borders text-body1 bg-black q-pa-sm q-mb-md", attrs: { borderless: "", dense: "", type: "number" }, scopedSlots: t._u([{ key: "append", fn: function () { return [e("q-btn", { staticClass: "q-px-sm", attrs: { dense: "", label: "MAX", outline: "", unelevated: "" }, on: { click: t.doSetMaxBnb } })] }, proxy: !0 }, { key: "prepend", fn: function () { return [e("q-icon", { attrs: { name: "img:" + t.tokenBnb.icon } })] }, proxy: !0 }]), model: { value: t.payload.amountBnb, callback: function (e) { t.$set(t.payload, "amountBnb", e) }, expression: "payload.amountBnb" } }), t.minBnb > 0 ? e("div", [e("div", { class: parseFloat(t.payload.amountBnb) < t.minBnb ? "text-orange" : void 0 }, [t._v("- " + t._s(t.$t("Min deposit")) + ": " + t._s(parseFloat(t.minBnb.toFixed(6)).toLocaleString()) + " " + t._s(t.tokenBnb.symbol) + " ($" + t._s(parseFloat((t.minBnb * t.tokenBnb.price).toFixed(2)).toLocaleString()) + ")")])]) : t._e(), t.maxBnb > 0 ? e("div", [e("div", [t._v("- " + t._s(t.$t("Your max deposit")) + ": " + t._s(parseFloat(t.maxBnb.toFixed(6)).toLocaleString()) + " " + t._s(t.tokenBnb.symbol) + " ($" + t._s(parseFloat((t.maxBnb * t.tokenBnb.price).toFixed(2)).toLocaleString()) + ")")])]) : t._e()], 1), e("q-card-actions", { attrs: { align: "center" } }, [e("div", { staticClass: "row justify-center q-col-gutter-md" }, [e("div", { staticClass: "col-grow" }, [e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], staticClass: "full-width q-px-md", attrs: { outline: "", "no-caps": "" } }, [t._v(t._s(t.$t("Cancel")))])], 1), [e("div", { staticClass: "col-grow" }, [e("q-btn", { staticClass: "full-width q-px-md", class: t.canBuyMinerBnb ? "bg-blue" : "bg-blue-grey-9", attrs: { unelevated: "", "no-caps": "", outline: !t.canBuyMinerBnb, disable: !t.canBuyMinerBnb, loading: t.isLoading }, on: { click: t.doBuyMinerBnb } }, [t._v(t._s(t.$t("Confirm")) + "\n            ")])], 1)]], 2)])] : "TokenLP" === t.currentStep ? [e("q-card-section", [e("div", { staticClass: "row justify-between" }, [e("div", { staticClass: "col-auto" }, [t._v(t._s(t.wealthPool.name) + " LP")]), e("div", [t._v(t._s(t.$t("Balance")) + ":\n          "), "" === t.tokenLP.balance ? e("span", [t._v("--")]) : e("text-number", { attrs: { amount: t.tokenLP.balance } })], 1)]), e("q-input", { staticClass: "rounded-borders text-body1 bg-black q-pa-sm q-mb-md", attrs: { borderless: "", dense: "", type: "number" }, scopedSlots: t._u([{ key: "append", fn: function () { return [e("q-btn", { staticClass: "q-px-sm", attrs: { dense: "", label: "MAX", outline: "", unelevated: "" }, on: { click: t.doSetMaxLP } })] }, proxy: !0 }]), model: { value: t.payload.amountLP, callback: function (e) { t.$set(t.payload, "amountLP", e) }, expression: "payload.amountLP" } }), t.minLP > 0 ? e("div", [e("div", [t._v("- " + t._s(t.$t("Min deposit")) + ": " + t._s(parseFloat(t.minLP.toFixed(4)).toLocaleString()) + " " + t._s(t.wealthPool.name) + " ($" + t._s(parseFloat((t.minLP * t.tokenLP.price).toFixed(2)).toLocaleString()) + ")")])]) : t._e(), t.maxLP > 0 ? e("div", [e("div", [t._v("- " + t._s(t.$t("Your max deposit")) + ": " + t._s(parseFloat(t.maxLP.toFixed(4)).toLocaleString()) + " " + t._s(t.wealthPool.name) + " ($" + t._s(parseFloat((t.maxLP * t.tokenLP.price).toFixed(2)).toLocaleString()) + ")")])]) : t._e()], 1), e("q-card-actions", { attrs: { align: "center" } }, [e("div", { staticClass: "row justify-center q-col-gutter-md" }, [e("div", { staticClass: "col-grow" }, [e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], staticClass: "full-width q-px-md", attrs: { outline: "", "no-caps": "" } }, [t._v(t._s(t.$t("Cancel")))])], 1), !t.isAllowanceLP && t.payload.amountLP > 0 ? [e("div", { staticClass: "col-grow" }, [e("q-btn", { staticClass: "full-width q-px-md", attrs: { unelevated: "", "no-caps": "", color: "orange", loading: t.isApproving }, on: { click: t.doApproveLP } }, [t._v(t._s(t.$t("Approve LP")))])], 1)] : [e("div", { staticClass: "col-grow" }, [e("q-btn", { staticClass: "full-width q-px-md", class: t.canBuyMinerLP ? "bg-blue" : "bg-blue-grey-9", attrs: { unelevated: "", "no-caps": "", outline: !t.canBuyMinerLP, disable: !t.canBuyMinerLP, loading: t.isLoading }, on: { click: t.doBuyMinerTokenLP } }, [t._v(t._s(t.$t("Confirm")) + "\n            ")])], 1)]], 2)])] : "Tokens" === t.currentStep ? [e("q-card-section", [e("div", { staticClass: "q-mb-md" }, [e("div", { staticClass: "row justify-between" }, [e("div", { staticClass: "col-auto" }, [t._v(t._s(t.token1.symbol))]), e("div", [t._v(t._s(t.$t("Balance")) + ":\n            "), "" === t.token1.balance ? e("span", [t._v("--")]) : e("text-number", { attrs: { amount: t.token1.balance } })], 1)]), e("q-input", { staticClass: "rounded-borders text-body1 bg-black q-pa-sm", attrs: { borderless: "", dense: "", type: "number" }, on: { input: function (e) { t.payload.isExactToken1 = !0 } }, scopedSlots: t._u([{ key: "append", fn: function () { return [e("q-btn", { staticClass: "q-px-sm", attrs: { dense: "", label: "MAX", outline: "", unelevated: "" }, on: { click: t.doSetMaxToken1 } })] }, proxy: !0 }, { key: "prepend", fn: function () { return [e("q-icon", { attrs: { name: "img:" + t.token1.icon } })] }, proxy: !0 }]), model: { value: t.payload.amountToken1, callback: function (e) { t.$set(t.payload, "amountToken1", e) }, expression: "payload.amountToken1" } })], 1), e("div", { staticClass: "q-mb-md" }, [e("div", { staticClass: "row justify-between" }, [e("div", { staticClass: "col-auto" }, [t._v(t._s(t.tokenBnb.symbol))]), e("div", [t._v(t._s(t.$t("Balance")) + ":\n            "), "" === t.tokenBnb.balance ? e("span", [t._v("--")]) : e("text-number", { attrs: { amount: t.tokenBnb.balance } })], 1)]), e("q-input", { staticClass: "rounded-borders text-body1 bg-black q-pa-sm", attrs: { borderless: "", dense: "", type: "number" }, on: { input: function (e) { t.payload.isExactToken0 = !1 } }, scopedSlots: t._u([{ key: "append", fn: function () { return [e("q-btn", { staticClass: "q-px-sm", attrs: { dense: "", label: "MAX", outline: "", unelevated: "" }, on: { click: t.doSetMaxToken0 } })] }, proxy: !0 }, { key: "prepend", fn: function () { return [e("q-icon", { attrs: { name: "img:" + t.tokenBnb.icon } })] }, proxy: !0 }]), model: { value: t.payload.amountToken0, callback: function (e) { t.$set(t.payload, "amountToken0", e) }, expression: "payload.amountToken0" } })], 1), t.minThoreum > 0 || t.minBnb > 0 ? e("div", { staticClass: "q-mt-md" }, [e("div", [t._v("- " + t._s(t.$t("Min deposit")) + ": " + t._s(parseFloat((t.minBnb / 2).toFixed(6)).toLocaleString()) + " " + t._s(t.tokenBnb.symbol) + " & " + t._s(parseFloat((t.minThoreum / 2).toFixed(2)).toLocaleString()) + " " + t._s(t.token1.symbol))]), e("div", [t._v("- " + t._s(t.$t("Your max deposit")) + ": " + t._s(parseFloat((t.maxBnb / 2).toFixed(6)).toLocaleString()) + " " + t._s(t.tokenBnb.symbol) + " & " + t._s(parseFloat((t.maxThoreum / 2).toFixed(2)).toLocaleString()) + " " + t._s(t.token1.symbol))])]) : t._e()]), e("q-card-actions", { attrs: { align: "center" } }, [e("div", { staticClass: "row justify-center q-col-gutter-sm" }, [t.isInsufficientFund ? e("div", { staticClass: "col-12 text-center text-orange" }, [t._v("\n          " + t._s(t.$t("Insufficient fund")) + "\n        ")]) : t._e(), !t.isAllowanceTokensToken1 && t.payload.amountToken1 > 0 && t.payload.amountToken0 > 0 ? [e("div", { staticClass: "col-auto" }, [e("q-btn", { staticClass: "full-width q-px-md", attrs: { unelevated: "", "no-caps": "", color: "orange", loading: t.isApproving0 }, on: { click: t.doApproveTokensToken1 } }, [t._v(t._s(t.$t("Approve")) + " " + t._s(t.token1.symbol))])], 1)] : [e("div", { staticClass: "col-auto" }, [e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], staticClass: "full-width q-px-md", attrs: { outline: "", "no-caps": "" } }, [t._v(t._s(t.$t("Cancel")))])], 1), e("div", { staticClass: "col-grow" }, [e("q-btn", { staticClass: "full-width q-px-md", class: t.canBuyMinerTokens ? "bg-blue" : "bg-blue-grey-9", attrs: { unelevated: "", "no-caps": "", outline: !t.canBuyMinerTokens, disable: !t.canBuyMinerTokens, loading: t.isLoading }, on: { click: t.doBuyMinerTokens } }, [t._v(t._s(t.$t("Confirm")) + "\n            ")])], 1)]], 2)])] : t._e()], 2) }, oe = [], re = (n("cdde"), { props: { item: { type: Object, required: !0, default: () => ({ poolAddress: "" }) } }, data() { return { isLoading: !1, isApproving: !1, isApproving0: !1, isApproving1: !1, referrerBy: "0x0000000000000000000000000000000000000000", currentStep: "TokenBnb", payload: { amountBnb: "", amountLP: "", isExactToken1: !1, amountToken1: "", amountToken0: "" } } }, watch: { "payload.amountToken1": function (t) { t > 0 && this.payload.isExactToken1 && this.$store.dispatch("token/getMinerAddLPQuote", { dexRouter: this.$contracts.dexRouter.address, token1Address: this.wealthPool["token1"], token0Address: this.wealthPool["token0"], amountToken1: t }).then((t => { this.payload.amountToken0 = this.toFixed(t, 6) })) }, "payload.amountToken0": function (t) { t > 0 && !this.payload.isExactToken1 && this.$store.dispatch("token/getMinerAddLPQuote", { dexRouter: this.$contracts.dexRouter.address, token1Address: this.wealthPool["token1"], token0Address: this.wealthPool["token0"], amountToken0: t }).then((t => { this.payload.amountToken1 = this.toFixed(t, 6) })) } }, computed: { ...Object(M["b"])({ isLogon: "auth/isLogon", getAccount: "auth/getAccount", getWealthPool: "token/getWealthPool" }), wealthPool() { return JSON.parse(JSON.stringify(this.getWealthPool(this.item.poolAddress))) }, tokenBnb() { return this.wealthPool.zapTokens.find((t => "ether" === t.address.toLowerCase())) }, token1() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token1"].toLowerCase())) }, token0() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token0"].toLowerCase())) }, tokenLP() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["depositToken"].toLowerCase())) }, priceThoreumTo1LP() { return this.tokenLP.price / this.token1.price }, priceBnbTo1LP() { return this.tokenLP.price / this.tokenBnb.price }, minThoreum() { return this.wealthPool.minInvest > 0 ? this.wealthPool.minInvest * this.priceThoreumTo1LP * 1.1 : 0 }, minBnb() { return this.wealthPool.minInvest > 0 ? this.wealthPool.minInvest * this.priceBnbTo1LP * 1.1 : 0 }, minLP() { return this.wealthPool.minInvest > 0 ? this.wealthPool.minInvest : 0 }, maxThoreum() { return this.wealthPool.walletDepositLimit > 0 ? this.maxLP * this.priceThoreumTo1LP : 0 }, maxBnb() { return this.wealthPool.walletDepositLimit > 0 ? this.maxLP * this.priceBnbTo1LP : 0 }, maxLP() { return this.wealthPool.walletDepositLimit > 0 ? 100 * (this.wealthPool.walletDepositLimit - this.wealthPool.userTotalInits) / (100 - this.wealthPool.devPercentage) : 0 }, isAllowanceToken1() { return this.token1 && this.token1.allowance > 0 && parseFloat(this.token1.allowance) >= parseFloat(this.payload.amountToken1) }, isAllowanceLP() { return this.wealthPool.allowance > 0 && parseFloat(this.wealthPool.allowance) >= parseFloat(this.payload.amountLP) }, isAllowanceTokensToken1() { return this.token1.allowance > 0 && parseFloat(this.token1.allowance) >= parseFloat(this.payload.amountToken1) }, isInsufficientFund() { return this.payload.amountToken1 > 0 && parseFloat(this.payload.amountToken1) > parseFloat(this.token1.balance) || this.payload.amountToken0 > 0 && parseFloat(this.payload.amountToken0) > parseFloat(this.tokenBnb.balance) }, canBuyMinerBnb() { return !this.wealthPool.isPaused && this.payload.amountBnb > 0 && parseFloat(this.payload.amountBnb) >= this.minBnb && parseFloat(this.payload.amountBnb) <= parseFloat(this.tokenBnb.balance) }, canBuyMinerToken1() { return !this.wealthPool.isPaused && this.payload.amountToken1 > 0 && parseFloat(this.payload.amountToken1) >= this.minThoreum && parseFloat(this.payload.amountToken1) <= parseFloat(this.token1.balance) }, canBuyMinerLP() { return !this.wealthPool.isPaused && this.payload.amountLP > 0 && parseFloat(this.payload.amountLP) >= this.minLP && parseFloat(this.payload.amountLP) <= parseFloat(this.tokenLP.balance) }, canBuyMinerTokens() { return !this.wealthPool.isPaused && this.payload.amountToken1 > 0 && this.payload.amountToken0 > 0 && (parseFloat(this.payload.amountToken1) >= this.minThoreum / 2 || parseFloat(this.payload.amountToken0) >= this.minBnb / 2) && !this.isInsufficientFund } }, methods: { doSetMaxBnb() { this.payload.isExactToken1 = !1, this.payload.amountBnb = this.toFixed(this.tokenBnb.balance, 6) }, doSetMaxToken1() { this.payload.isExactToken1 = !0, this.payload.amountToken1 = this.toFixed(this.token1.balance, 6) }, doSetMaxToken0() { this.payload.isExactToken0 = !0, this.payload.amountToken0 = this.toFixed(this.tokenBnb.balance, 6) }, doSetMaxLP() { this.payload.amountLP = this.toFixed(Math.min(this.wealthPool.balance, this.maxLP), 6) }, doApproveToken1() { this.isApproving = !0, this.$store.dispatch("token/approveToken", { account: this.getAccount, token: this.token1.address, spender: this.wealthPool.zapAddress }).then((t => { this.$root.$emit("showMessage", t) })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isApproving = !1 })) }, doApproveLP() { this.isApproving = !0, this.$store.dispatch("token/approveToken", { account: this.getAccount, token: this.wealthPool.depositToken, spender: this.wealthPool.poolAddress }).then((t => { this.$root.$emit("showMessage", t) })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isApproving = !1 })) }, doApproveTokensToken0() { this.isApproving = !0, this.$store.dispatch("token/approveToken", { account: this.getAccount, token: this.token0.address, spender: this.wealthPool.zapAddress }).then((t => { this.$root.$emit("showMessage", t) })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isApproving = !1 })) }, doApproveTokensToken1() { this.isApproving0 = !0, this.$store.dispatch("token/approveToken", { account: this.getAccount, token: this.token1.address, spender: this.wealthPool.zapAddress }).then((t => { this.$root.$emit("showMessage", t) })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isApproving0 = !1 })) }, doBuyMinerBnb() { this.isLoading = !0, this.$store.dispatch("token/writeZapWealthContract", { account: this.getAccount, amount: this.payload.amountBnb, action: "zapBNBToLP", zapContract: this.wealthPool.zapAddress, referral: this.referrerBy, isDeposit: !0, isMiner: !0 }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isLoading = !1 })) }, doBuyMinerToken1() { this.isLoading = !0, this.$store.dispatch("token/writeZapWealthContract", { account: this.getAccount, amount: this.payload.amountToken1, action: this.token1.method, fromToken: this.token1.address, lpPair: this.wealthPool.depositToken, zapContract: this.wealthPool.zapAddress, decimal: this.token1.decimal, referral: this.referrerBy, isDeposit: !0, isMiner: !0 }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isLoading = !1 })) }, doBuyMinerTokenLP() { this.isLoading = !0, this.$store.dispatch("token/writeWealthContract", { action: "stake", wealthPool: this.wealthPool.poolAddress, account: this.getAccount, amount: this.payload.amountLP, referral: this.referrerBy }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isLoading = !1 })) }, doBuyMinerTokens() { this.isLoading = !0, this.$store.dispatch("token/writeZapWealthContract", { action: "userAddLiquidityAndDeposit", account: this.getAccount, zapContract: this.wealthPool.zapAddress, amountToken1: this.payload.amountToken1, amountToken0: this.payload.amountToken0, referral: this.referrerBy }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isLoading = !1 })) } }, mounted() { this.$q.cookies.has("referrer") && this.isValidAddress(this.$q.cookies.get("referrer")) && (this.referrerBy = this.$q.cookies.get("referrer")) } }), ue = re, pe = n("429b"), le = n("7460"), de = n("27f9"), ye = n("4b7e"), ce = Object(g["a"])(ue, se, oe, !1, null, null, null), me = ce.exports; Qt()(ce, "components", { QCard: $t["a"], QToolbar: Ot["a"], QToolbarTitle: Dt["a"], QBtn: Nt["a"], QTabs: pe["a"], QTab: le["a"], QIcon: Ut["a"], QCardSection: Rt["a"], QInput: de["a"], QCardActions: ye["a"] }), Qt()(ce, "directives", { ClosePopup: Wt["a"] }); var be = function () { var t = this, e = t._self._c; return e("q-card", { staticClass: "grow-box-2", staticStyle: { width: "550px" } }, [e("q-toolbar", [e("q-toolbar-title", [t._v(t._s(t.$t("Unstake")))]), e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], attrs: { dense: "", icon: "close", round: "", unelevated: "" } })], 1), e("q-card-section", [e("p", [t._v(t._s(t.$t("Choose your target token")) + ":")]), e("q-list", [e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doWithdrawBnb } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.tokenBnb.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.tokenBnb.symbol) + "\n          ")])], 1)], 1), e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doWithdrawToken1 } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.token1.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.token1.symbol) + "\n          ")])], 1)], 1), e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doWithdrawLP } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.wealthPool.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.wealthPool.name) + " LP\n          ")])], 1)], 1), e("q-item", { staticClass: "bg-blue-grey-14 rounded-borders q-mb-md", attrs: { clickable: "" }, on: { click: t.doWithdrawTokens } }, [e("q-item-section", { attrs: { avatar: "", top: "" } }, [e("q-avatar", { attrs: { size: "50px", square: "" } }, [e("q-img", { attrs: { src: t.wealthPool.icon } })], 1)], 1), e("q-item-section", [e("q-item-label", { staticClass: "text-h5" }, [t._v("\n            " + t._s(t.tokenBnb.symbol) + " & " + t._s(t.token1.symbol) + "\n          ")])], 1)], 1)], 1)], 1)], 1) }, he = [], Te = { props: { item: { type: Object, required: !0, default: () => ({ poolAddress: "", key: "" }) } }, data() { return { isCollecting: !1 } }, computed: { ...Object(M["b"])({ isLogon: "auth/isLogon", getAccount: "auth/getAccount", getWealthPool: "token/getWealthPool" }), wealthPool() { return JSON.parse(JSON.stringify(this.getWealthPool(this.item.poolAddress))) }, tokenBnb() { return this.wealthPool.zapTokens.find((t => "ether" === t.address.toLowerCase())) }, token1() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token1"].toLowerCase())) }, token0() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token0"].toLowerCase())) }, tokenLP() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["depositToken"].toLowerCase())) } }, methods: { doWithdrawBnb() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "unStakeToToken", wealthPool: this.wealthPool.poolAddress, targetToken: this.wealthPool["token0"], key: this.item.key }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) }, doWithdrawToken1() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "unStakeToToken", wealthPool: this.wealthPool.poolAddress, targetToken: this.wealthPool["token1"], key: this.item.key }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) }, doWithdrawLP() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "unStakeToToken", wealthPool: this.wealthPool.poolAddress, targetToken: this.wealthPool.depositToken, key: this.item.key }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) }, doWithdrawTokens() { this.isCollecting = !0, this.$store.dispatch("token/writeWealthContract", { account: this.getAccount, action: "unStakeToToken", wealthPool: this.wealthPool.poolAddress, targetToken: "0x0000000000000000000000000000000000000000", key: this.item.key }).then((t => { this.$root.$emit("showMessage", t), this.$emit("close") })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isCollecting = !1 })) } } }, fe = Te, we = Object(g["a"])(fe, be, he, !1, null, null, null), ge = we.exports; Qt()(we, "components", { QCard: $t["a"], QToolbar: Ot["a"], QToolbarTitle: Dt["a"], QBtn: Nt["a"], QCardSection: Rt["a"], QList: Gt["a"], QItem: Yt["a"], QItemSection: Kt["a"], QAvatar: te["a"], QImg: ee["a"], QItemLabel: ne["a"] }), Qt()(we, "directives", { ClosePopup: Wt["a"] }); var ke = function () { var t = this, e = t._self._c; return e("q-card", { staticClass: "grow-box-2", staticStyle: { width: "550px" } }, [e("q-toolbar", [e("q-toolbar-title", [t._v("UnZap LP to Tokens")]), e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], attrs: { dense: "", icon: "close", round: "", unelevated: "" } })], 1), e("q-tabs", { attrs: { dense: "", shrink: "", "active-color": "blue" }, model: { value: t.currentStep, callback: function (e) { t.currentStep = e }, expression: "currentStep" } }, [e("q-tab", { attrs: { name: "Token0" }, scopedSlots: t._u([{ key: "default", fn: function () { return [e("q-icon", { staticClass: "q-mb-sm", attrs: { size: "26px", name: "img:https://storage.googleapis.com/thor2-cdn/public/coins/BNB.png" } }), t._v("\n        BNB\n      ")] }, proxy: !0 }]) }), e("q-tab", { attrs: { name: "Tokens" }, scopedSlots: t._u([{ key: "default", fn: function () { return [e("q-icon", { attrs: { size: "40px", name: "img:https://storage.googleapis.com/thor2-cdn/public/coins/THOREUM-WBNB.png" } }), t._v("\n        " + t._s(t.token1.symbol) + " & " + t._s(t.tokenBnb.symbol) + "\n      ")] }, proxy: !0 }]) })], 1), e("q-card-section", { staticClass: "q-pb-none" }, [e("div", { staticClass: "row justify-between" }, [e("div", { staticClass: "col-auto" }, [t._v(t._s(t.tokenLP.symbol) + " LP")]), e("div", [t._v("Balance:\n        "), "" === t.tokenLP.balance ? e("span", [t._v("--")]) : e("text-number", { attrs: { amount: t.tokenLP.balance } })], 1)]), e("q-input", { staticClass: "rounded-borders text-body1 bg-black q-pa-sm q-mb-sm", attrs: { borderless: "", dense: "", type: "number" }, scopedSlots: t._u([{ key: "append", fn: function () { return [e("q-btn", { staticClass: "q-px-sm", attrs: { dense: "", label: "MAX", outline: "", unelevated: "" }, on: { click: t.doSetMax } })] }, proxy: !0 }, { key: "prepend", fn: function () { return [e("q-icon", { attrs: { name: "img:" + t.tokenLP.icon } })] }, proxy: !0 }]), model: { value: t.payload.amount, callback: function (e) { t.$set(t.payload, "amount", e) }, expression: "payload.amount" } })], 1), "Token0" === t.currentStep ? [e("q-card-section", { staticClass: "q-pt-none" }, [e("div", { staticClass: "text-h6" }, [t._v("\n        You will get:\n        "), e("span", { staticClass: "text-green" }, ["" === t.payload.amount ? e("span", [t._v("--")]) : e("span", [e("text-number", { attrs: { amount: t.breakAmountToken0 } }), t._v(" " + t._s(t.tokenBnb.symbol) + "\n        ")], 1)])])]), e("q-card-actions", { attrs: { align: "center" } }, [e("div", { staticClass: "row justify-center" }, [t.isAllowanceLPUnZap ? e("div", { staticClass: "col-auto" }, [e("q-btn", { staticClass: "q-px-sm", attrs: { unelevated: "", "no-caps": "", color: "orange", size: "lg", disable: !t.isCanLPUnZap, loading: t.isBreakingLP }, on: { click: t.doBreakToken0 } }, [t._v("Confirm")])], 1) : e("div", { staticClass: "col-auto" }, [e("q-btn", { staticClass: "q-px-sm", attrs: { unelevated: "", "no-caps": "", color: "orange", size: "lg", loading: t.isApprovingLP }, on: { click: t.doApproveLP } }, [t._v("Approve LP")])], 1)])])] : "Tokens" === t.currentStep ? [e("q-card-section", { staticClass: "q-pt-none" }, [e("div", { staticClass: "text-h6" }, [t._v("\n        You will get:\n        "), e("span", { staticClass: "text-green" }, ["" === t.payload.amount ? e("span", [t._v("--")]) : e("span", [e("text-number", { attrs: { amount: t.unZapWbnbAmount, decimal: 4 } }), t._v(" " + t._s(t.tokenBnb.symbol) + " &\n          "), e("text-number", { attrs: { amount: t.unZapThoreumAmount, decimal: 4 } }), t._v(" " + t._s(t.token1.symbol) + "\n        ")], 1)])])]), e("q-card-actions", { attrs: { align: "center" } }, [e("div", { staticClass: "row justify-center" }, [t.isAllowanceLPUnZap ? e("div", { staticClass: "col-auto" }, [e("q-btn", { staticClass: "q-px-sm", attrs: { unelevated: "", "no-caps": "", color: "orange", size: "lg", disable: !t.isCanLPUnZap, loading: t.isBreakingLP }, on: { click: t.doBreakTokens } }, [t._v("Confirm")])], 1) : e("div", { staticClass: "col-auto" }, [e("q-btn", { staticClass: "q-px-sm", attrs: { unelevated: "", "no-caps": "", color: "orange", size: "lg", loading: t.isApprovingLP }, on: { click: t.doApproveLP } }, [t._v("Approve LP")])], 1)])])] : t._e()], 2) }, ve = [], Me = { props: { item: { type: Object, required: !0, default: () => ({ poolAddress: "", tab: "Token0" }) } }, data() { return { isApprovingLP: !1, isBreakingLP: !1, currentStep: this.item.tab || "Token0", payload: { amount: "" } } }, computed: { ...Object(M["b"])({ isLogon: "auth/isLogon", getAccount: "auth/getAccount", getWealthPool: "token/getWealthPool", getTokenInfo: "token/getTokenInfo", getZapInfo: "token/getZapInfo", getToken: "token/getToken" }), tokenInfo() { return JSON.parse(JSON.stringify(this.getTokenInfo)) }, zapInfo() { return JSON.parse(JSON.stringify(this.getZapInfo)) }, wealthPool() { return JSON.parse(JSON.stringify(this.getWealthPool(this.item.poolAddress))) }, tokenBnb() { return this.wealthPool.zapTokens.find((t => "ether" === t.address.toLowerCase())) }, token1() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token1"].toLowerCase())) }, token0() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["token0"].toLowerCase())) }, tokenLP() { return this.wealthPool.zapTokens.find((t => t.address.toLowerCase() === this.wealthPool["depositToken"].toLowerCase())) }, tokenWbnb() { return this.getToken(this.wealthPool.token0) }, isCanLPUnZap() { return parseFloat(this.payload.amount) > 0 }, isAllowanceLPUnZap() { return "" === this.payload.amount || this.tokenLP.allowance >= parseFloat(this.payload.amount) }, breakAmountToken0() { return parseFloat(this.payload.amount) * this.wealthPool.lpPriceBnb * .87 }, unZapThoreumAmount() { return this.zapInfo.thoreumPerLP * this.payload.amount * (100 - this.tokenInfo.totalBuyFees) / 100 }, unZapWbnbAmount() { return this.zapInfo.bnbPerLP * this.payload.amount } }, methods: { doSetMax() { this.payload.amount = this.toFixed(this.tokenLP.balance, 6) }, doApproveLP() { this.isApprovingLP = !0, this.$store.dispatch("token/approveToken", { account: this.getAccount, token: this.tokenLP.address, spender: this.wealthPool.zapAddress }).then((t => { this.$root.$emit("showMessage", t) })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isApprovingLP = !1 })) }, doBreakToken0() { this.isBreakingLP = !0, this.$store.dispatch("token/writeZapWealthContract", { action: "unZapToToken", account: this.getAccount, zapContract: this.wealthPool.zapAddress, targetToken: this.tokenWbnb.address, amount: this.payload.amount }).then((t => { this.$root.$emit("showMessage", t) })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isBreakingLP = !1 })) }, doBreakTokens() { this.isBreakingLP = !0, this.$store.dispatch("token/writeZapWealthContract", { action: "breakLP", account: this.getAccount, zapContract: this.wealthPool.zapAddress, lpPair: this.wealthPool.depositToken, amount: this.payload.amount }).then((t => { this.$root.$emit("showMessage", t) })).catch((t => { this.$root.$emit("showMessage", { status: !1, message: t.message }) })).finally((() => { this.isBreakingLP = !1 })) } } }, Pe = Me, _e = Object(g["a"])(Pe, ke, ve, !1, null, null, null), Ce = _e.exports; Qt()(_e, "components", { QCard: $t["a"], QToolbar: Ot["a"], QToolbarTitle: Dt["a"], QBtn: Nt["a"], QTabs: pe["a"], QTab: le["a"], QIcon: Ut["a"], QCardSection: Rt["a"], QInput: de["a"], QCardActions: ye["a"] }), Qt()(_e, "directives", { ClosePopup: Wt["a"] }); var Be = function () { var t = this, e = t._self._c; return e("iframe", { ref: "banner", attrs: { src: "/banner.html", scrolling: "no" } }) }, xe = [], Ae = { mounted() { this.$refs.banner.style.height = Math.round(this.$refs.banner.clientWidth / 4.5) + "px" } }, Le = Ae, Ee = Object(g["a"])(Le, Be, xe, !1, null, null, null), Fe = Ee.exports, Se = function () { var t = this, e = t._self._c; return e("span", t._b({}, "span", t.$attrs, !1), [t._v(t._s(parseFloat(parseFloat(t.amount).toFixed(t.decimal)).toLocaleString()))]) }, qe = [], Ie = { props: { amount: { type: String | Number, required: !0, default: "" }, decimal: { type: Number, default: 8 } } }, $e = Ie, Oe = Object(g["a"])($e, Se, qe, !1, null, null, null), De = Oe.exports, Ne = function () { var t = this, e = t._self._c; return e("q-card", { staticClass: "grow-box-2", staticStyle: { width: "500px" }, style: t.$q.screen.gt.sm ? "min-width: 700px" : void 0 }, [e("q-card-section", { staticClass: "q-pa-none" }, [e("q-video", { staticClass: "rounded-borders", staticStyle: { width: "100%" }, attrs: { src: t.currentVideo, ratio: 16 / 9 } }), e("div", { staticClass: "fixed-top-right q-ma-sm" }, [e("q-btn", { directives: [{ name: "close-popup", rawName: "v-close-popup" }], attrs: { dense: "", icon: "close", color: "black", "text-color": "red", push: "", round: "" } })], 1)], 1)], 1) }, Re = [], Ue = { props: { item: { type: Object, required: !0, default: () => ({ idVideo: "", tab: "Token0" }) } }, computed: { currentVideo() { return "https://www.youtube.com/embed/" + this.item.idVideo + "?ref=0" } } }, We = Ue, ze = n("6ac0"), Qe = Object(g["a"])(We, Ne, Re, !1, null, null, null), He = Qe.exports; Qt()(Qe, "components", { QCard: $t["a"], QCardSection: Rt["a"], QVideo: ze["a"], QBtn: Nt["a"] }), Qt()(Qe, "directives", { ClosePopup: Wt["a"] }); var je = async ({ Vue: t }) => { t.component("text-number", De), t.component("card-banner", Fe), t.component("card-user-wallet", jt), t.component("card-wealth-collect", ie), t.component("card-wealth-deposit", me), t.component("card-wealth-withdraw", ge), t.component("card-wealth-break-lp", Ce), t.component("card-popup-video", He) }, Ze = (n("d9e2"), async ({ Vue: t }) => { t.prototype.isValidAddress = t => Y["a"].utils.isAddress(t), t.prototype.sleepSeconds = async t => await new Promise((e => setTimeout(e, t))), t.prototype.shortAddress = (t, e = 4, n = 4) => t ? t.toString().substr(0, n) + "...." + t.toString().substr(-1 * e) : "", t.prototype.shortUrl = t => t.split("/")[0] + "//" + t.split("/")[2] + "/......", t.prototype.getTxLink = t => "https://bscscan.com/tx/" + t, t.prototype.getScanLink = t => "https://bscscan.com/address/" + t, t.prototype.getRPCUrl = () => { let e = t.prototype.$networkItems.find((t => t.chainId === parseInt(56))); return e.rpcUrls[0] }, t.prototype.toFixed = (t, e = 5) => { let n = new RegExp("^-?\\d+(?:.\\d{0," + (e || -1) + "})?"); return t ? parseFloat(t).toFixed(9).match(n)[0] : "0" }, t.prototype.toFixedRoundUp = (t, e = 5) => { let n = parseInt("1" + "0".repeat(e)); return Math.ceil(t * n) / n }, t.prototype.toFixedRoundDown = (t, e = 5) => { let n = parseInt("1" + "0".repeat(e)); return Math.floor(t * n) / n }, t.prototype.getRPCOptions = () => { let e = {}; return t.prototype.$networkItems.forEach((t => { e[t.chainId] = t.rpcUrls[0] })), e }, t.prototype.shortInterval = t => { let e = t / 3600, n = t / 60; if (e >= 24) { let t = e % 24 > 0 ? " " + e % 24 + " hours" : "", n = (e - e % 24) / 24; return n + " days" + t } return n >= 60 ? e + " hours" : n + " minutes" }, t.prototype.shortBigNumber = t => (t = parseFloat(t), t >= 1e21 ? (t / 1e21).toLocaleString() + " MQT" : t >= 1e15 ? (t / 1e15).toLocaleString() + " QT" : t >= 1e9 ? (t / 1e9).toLocaleString() + " T" : t >= 1e6 ? (t / 1e6).toLocaleString() + " M" : t ? parseFloat(t.toFixed(2)).toLocaleString() : void 0), t.prototype.arrayChunk = (t, e) => Array.from({ length: Math.ceil(t.length / e) }, ((n, a) => t.slice(a * e, a * e + e))), t.prototype.timeDistance = t => { let e = { days: 0, hours: 0, minutes: 0, seconds: 0 }, n = Math.floor((new Date).getTime() / 1e3), a = t - n, i = a > 0; return i && (e.days = Math.floor(a / 86400), e.hours = Math.floor(a % 86400 / 3600), e.minutes = Math.floor(a % 3600 / 60), e.seconds = Math.floor(a % 60)), { counting: i, distance: e } }; let e = function () { let t = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g, n = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, a = /[^-+\dA-Z]/g, i = function (t, e) { t = String(t), e = e || 2; while (t.length < e) t = "0" + t; return t }; return function (s, o, r) { let u = e; if (1 !== arguments.length || "[object String]" !== Object.prototype.toString.call(s) || /\d/.test(s) || (o = s, s = void 0), s = s ? new Date(s) : new Date, isNaN(s)) throw SyntaxError("invalid date"); o = String(u.masks[o] || o || u.masks["default"]), "UTC:" === o.slice(0, 4) && (o = o.slice(4), r = !0); let p = r ? "getUTC" : "get", l = s[p + "Date"](), d = s[p + "Day"](), y = s[p + "Month"](), c = s[p + "FullYear"](), m = s[p + "Hours"](), b = s[p + "Minutes"](), h = s[p + "Seconds"](), T = s[p + "Milliseconds"](), f = r ? 0 : s.getTimezoneOffset(), w = { d: l, dd: i(l), ddd: u.i18n.dayNames[d], dddd: u.i18n.dayNames[d + 7], m: y + 1, mm: i(y + 1), mmm: u.i18n.monthNames[y], mmmm: u.i18n.monthNames[y + 12], yy: String(c).slice(2), yyyy: c, h: m % 12 || 12, hh: i(m % 12 || 12), H: m, HH: i(m), M: b, MM: i(b), s: h, ss: i(h), l: i(T, 3), L: i(T > 99 ? Math.round(T / 10) : T), t: m < 12 ? "a" : "p", tt: m < 12 ? "am" : "pm", T: m < 12 ? "A" : "P", TT: m < 12 ? "AM" : "PM", Z: r ? "UTC" : (String(s).match(n) || [""]).pop().replace(a, ""), o: (f > 0 ? "-" : "+") + i(100 * Math.floor(Math.abs(f) / 60) + Math.abs(f) % 60, 4), S: ["th", "st", "nd", "rd"][l % 10 > 3 ? 0 : (l % 100 - l % 10 !== 10) * l % 10] }; return o.replace(t, (function (t) { return t in w ? w[t] : t.slice(1, t.length - 1) })) } }(); e.masks = { default: "ddd mmm dd yyyy HH:MM:ss", shortDate: "m/d/yy", mediumDate: "mmm d, yyyy", longDate: "mmmm d, yyyy", fullDate: "dddd, mmmm d, yyyy", shortTime: "h:MM TT", mediumTime: "h:MM:ss TT", longTime: "h:MM:ss TT Z", isoDate: "yyyy-mm-dd", isoTime: "HH:MM:ss", isoDateTime: "yyyy-mm-dd HH:MM:ss", isoUtcDateTime: "UTC:yyyy-mm-dd HH:MM:ss' UTC'" }, e.i18n = { dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] }, Date.prototype.format = function (t, n) { return e(this, t, n) }, String.prototype.formatNumber = function (t = 0) { return parseFloat(parseFloat(this).toFixed(t)).toLocaleString() }, Number.prototype.formatNumber = function (t = 0) { return parseFloat(this.toFixed(t)).toLocaleString() }, String.prototype.capitalize = function () { return this.charAt(0).toUpperCase() + this.slice(1) } }), Ve = async ({ Vue: t }) => { t.prototype.$networkItems = [{ chainId: 56, chainName: "BNBChain", rpcUrls: ["https://bsc-dataseed.binance.org/"], iconUrls: ["https://storage.googleapis.com/thor2-cdn/public/icons/bsc-network.png"], nativeCurrency: { name: "Binance Coin", symbol: "BNB", decimals: 18 }, blockExplorerUrls: ["https://bscscan.com/"], mainSiteUrl: "https://libero.financial" }, { chainId: 250, chainName: "Fantom", rpcUrls: ["https://rpc.ftm.tools/"], iconUrls: ["https://storage.googleapis.com/thor2-cdn/public/icons/fantom-network.png"], nativeCurrency: { name: "Fantom", symbol: "FTM", decimals: 18 }, blockExplorerUrls: ["https://ftmscan.com/"], mainSiteUrl: "https://flibero.financial" }] }, Je = async ({ Vue: t }) => { t.prototype.$TradeType = { EXACT_INPUT: 0, EXACT_OUTPUT: 1 }, t.prototype.$Rouding = { ROUND_DOWN: 0, ROUND_HALF_UP: 1, ROUND_UP: 2 }, t.prototype.$ETHER = { name: "Binance", symbol: "BNB", address: "ETHER", decimal: 18 }, t.prototype.$WRAP_ETHER = { name: "WBNB", symbol: "WBNB", address: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c", decimal: 18 }, t.prototype.$ZERO_HEX = "0x0" }, Xe = async ({ Vue: t }) => { t.prototype.$contracts = { fiatAddress: ["0xe9e7cea3dedca5984780bafc599bd69add087d56", "0x55d398326f99059ff775485246999027b3197955"], dexRouter: { address: "0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8", abi: n("238c") }, dexPair: { abi: n("9eac") }, multiCall: { address: "0x1ee38d535d541c55c9dae27b12edf090c608e6fb", abi: n("0af5") }, networkToken: { address: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c", symbol: "WBNB", icon: "https://storage.googleapis.com/thor2-cdn/public/coins/WBNB.png", abi: n("2e6a") }, mainToken: { address: "0xCE1b3e5087e8215876aF976032382dd338cF8401", symbol: "THOREUM", icon: "https://storage.googleapis.com/thor2-cdn/public/coins/THOREUM.png", abi: n("a53d"), mainPair: "0xd822e1737b1180f72368b2a9eb2de22805b67e34", oldAddress: "0xF2A92BC1Cf798fF4De14502a9C6FdA58865e8D5d" }, zapContract: { abi: n("f407") }, minerPool: { abi: n("53ef") }, minerLottery: { abi: n("370c") }, wealthPool: { abi: n("b0f4") }, zapWealthContract: { abi: n("2cb4") } } }; const Ge = "/"; async function Ye() { const { app: t, store: e, router: n } = await _t(); let a = !1; const i = t => { a = !0; const e = Object(t) === t ? n.resolve(t).route.fullPath : t; window.location.href = e }, s = window.location.href.replace(window.location.origin, ""), o = [Lt, Et, je, Ze, Ve, Je, Xe]; for (let u = 0; !1 === a && u < o.length; u++)if ("function" === typeof o[u]) try { await o[u]({ app: t, router: n, store: e, Vue: p["a"], ssrContext: null, redirect: i, urlPath: s, publicPath: Ge }) } catch (r) { return r && r.url ? void (window.location.href = r.url) : void console.error("[Quasar] boot error:", r) } !0 !== a && new p["a"](t) } Ye() }, "370c": function (t) { t.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"players","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tickets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]') }, "53ef": function (t) { t.exports = JSON.parse('[{"inputs":[],"name":"ADD_AUTOMATE","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"AUTO_CONTRACT","outputs":[{"internalType":"contract IAutoMiner","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"AUTO_ENABLED","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"AUTO_MIN_DEPOSIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"AUTO_TAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BIGGEST_BUYER_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BUYING_POWER_STEP_PERDAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"COMPOUND_BONUS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"COMPOUND_BONUS_MAX_TIMES","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"COMPOUND_STEP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"COMPOUND_TAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CUTOFF_STEP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_REFERRAL","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EGGS_TO_HIRE_1MINERS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"LockMagic","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MARKET_EGGS_DIVISOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MARKET_EGGS_DIVISOR_COMPOUND","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MARKET_EGGS_DIVISOR_SELL","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_EARNINGS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_TAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_INVEST_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"OneGetFree","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERCENTS_DIVIDER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFERRAL","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REMOVE_AUTOMATE","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"TAX_ACCELERATOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMER_BUYER_MIN_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMER_BUYER_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMER_BUYER_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WALLET_DEPOSIT_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WHALE_TAX_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WITHDRAW_LIMIT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WITHDRAW_STEP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WITHDRAW_TAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ZERO_STEP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"amountPerHour","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"authorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"automations","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bankWallet","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"biggestBuyer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"biggestBuyerAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"biggestBuyerPaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"biggestBuyerPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"ref","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"buyEggs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"ref","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"buyEggsForMe","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"ref","type":"address"}],"name":"buyForWinItNow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"eth","type":"uint256"},{"internalType":"uint256","name":"contractBalance","type":"uint256"}],"name":"calculateEggBuy","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"eth","type":"uint256"}],"name":"calculateEggBuySimple","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"eggs","type":"uint256"}],"name":"calculateEggSell","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"eggs","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"calculateEggSellForYield","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"rt","type":"uint256"},{"internalType":"uint256","name":"rs","type":"uint256"},{"internalType":"uint256","name":"bs","type":"uint256"}],"name":"calculateTrade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"canCompound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"canWithdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"compoundEggs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"contractStarted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAutomateCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getAvailableEarnings","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"getBonusPartnership","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"getBonusxThoreum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"getEggs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"getEggsSinceLastHatch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getEggsYield","outputs":[{"internalType":"uint256","name":"_miners","type":"uint256"},{"internalType":"uint256","name":"_earningsPerDay","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFree1LP","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"getMaxPayOutLeft","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getNextCompoundBonus","outputs":[{"internalType":"uint256","name":"totalBonus","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getNextCompoundTax","outputs":[{"internalType":"uint256","name":"compoundTax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getNextWithdrawalTax","outputs":[{"internalType":"uint256","name":"withdrawTax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getNormalWithdrawalTax","outputs":[{"internalType":"uint256","name":"withdrawTax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPartnershipCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTimeStamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"getUserEarningsPerDay","outputs":[{"internalType":"uint256","name":"_miners","type":"uint256"},{"internalType":"uint256","name":"_earningsPerDay","type":"uint256"},{"internalType":"uint256","name":"_aprDay","type":"uint256"},{"internalType":"uint256","name":"_aprDayOnDeposit","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getUserPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getWhaleTax","outputs":[{"internalType":"uint256","name":"_whaleTax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getWinItNowAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"hatchEggsForAuto","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isAuthorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isRewardBiggestBuyer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isRewardTimerPool","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isWinItNow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lastDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUser","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"launchTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketEggs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"moment","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_hour","type":"uint256"}],"name":"payBiggestBuyer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"userDeposit","type":"uint256"}],"name":"recalculateMiner","outputs":[{"internalType":"uint256","name":"miners","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"resetMiner","outputs":[{"internalType":"uint256","name":"_decreased","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"retrieveTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"rewarded","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sellEggs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"sellEggsForAuthorized","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"sellEggsForAuto","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"sellEggsForExternal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"},{"internalType":"bool","name":"_value","type":"bool"}],"name":"setPrison","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"startPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"syncBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"todayDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token_MAIN","outputs":[{"internalType":"contract IERC20Upgradeable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAutoPaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBiggestBuyerPaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBonusDeals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalCompound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalMinersAdjusted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalRefBonus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTaxWithDrawn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalUsers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalWithdrawn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"unauthorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updateV4","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_mainToken","type":"address"}],"name":"upgradeToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"users","outputs":[{"internalType":"uint256","name":"initialDeposit","type":"uint256"},{"internalType":"uint256","name":"userDeposit","type":"uint256"},{"internalType":"uint256","name":"miners","type":"uint256"},{"internalType":"uint256","name":"claimedEggs","type":"uint256"},{"internalType":"uint256","name":"lastHatch","type":"uint256"},{"internalType":"address","name":"referrer","type":"address"},{"internalType":"uint256","name":"referralsCount","type":"uint256"},{"internalType":"uint256","name":"referralRewards","type":"uint256"},{"internalType":"uint256","name":"totalWithdrawn","type":"uint256"},{"internalType":"uint256","name":"dailyCompoundBonus","type":"uint256"},{"internalType":"uint256","name":"lastWithdrawTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winItNowPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"winItNowWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]') }, "9eac": function (t) { t.exports = JSON.parse('[{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"_reserve0","type":"uint112"},{"internalType":"uint112","name":"_reserve1","type":"uint112"},{"internalType":"uint32","name":"_blockTimestampLast","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]') }, a53d: function (t) { t.exports = JSON.parse('[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"autoLiquidityCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"autoLiquidityTreasury","outputs":[{"internalType":"contract IAutoLiquidityTreasury","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"autoNuke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"automatedMarketMakerPairs","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"biggestBuyer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"biggestBuyerAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"biggestBuyerPaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"biggestBuyerPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"blacklistFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"blacklistTo","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"breakerBuyFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"breakerOnSellOnly","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"breakerPercent","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"breakerPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"breakerSellFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"busdDividendFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"busdToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"busdTreasury","outputs":[{"internalType":"contract ITreasury","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"circuitBreakerFlag","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"circuitBreakerTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"dexPair","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dexRouter","outputs":[{"internalType":"contract IDEXRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dexToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isAuthorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isBreakerEnable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isFeesOnNormalTransfers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isNotMigrating","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isRewardBiggestBuyer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isTreasuryInBusd","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"launchTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"liquidityFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"liquidityToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lpNukeBuildup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lpNukeEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketingFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"marketingWallet","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxSellTransactionAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minNukeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"normalTransferFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nukePercentPerSell","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nukePercentToBurn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nukeTreasury","outputs":[{"internalType":"contract ITreasury","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardBuyerFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"swapTokensAtAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"taxBreakerCheck","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"taxTreasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBiggestBuyerPaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalBuyFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalNuked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSellFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_hour","type":"uint256"}],"name":"payBiggestBuyer","outputs":[],"stateMutability":"nonpayable","type":"function"}]') }, b0f4: function (t) { t.exports = JSON.parse('[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"adr","type":"address"},{"indexed":false,"internalType":"uint256","name":"amtx","type":"uint256"},{"indexed":false,"internalType":"address","name":"ref","type":"address"}],"name":"StakeFor","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"LockMagic","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"PercsKey","outputs":[{"internalType":"uint256","name":"divsPercentage","type":"uint256"},{"internalType":"uint256","name":"feePercentage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RETRO_MODE","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"currDays","type":"uint256"}],"name":"Retro","outputs":[{"internalType":"uint256","name":"newAmt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amty","type":"uint256"},{"internalType":"uint256","name":"elapsedHours","type":"uint256"},{"internalType":"uint256","name":"elapsedDays","type":"uint256"}],"name":"RetroRem","outputs":[{"internalType":"uint256","name":"remPayOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"UsersKey","outputs":[{"internalType":"uint256","name":"startDate","type":"uint256"},{"internalType":"uint256","name":"divs","type":"uint256"},{"internalType":"uint256","name":"refBonus","type":"uint256"},{"internalType":"uint256","name":"totalInits","type":"uint256"},{"internalType":"uint256","name":"totalWiths","type":"uint256"},{"internalType":"uint256","name":"lastWith","type":"uint256"},{"internalType":"uint256","name":"keyCounter","type":"uint256"},{"internalType":"address","name":"ref","type":"address"},{"internalType":"uint256","name":"refCount","type":"uint256"},{"internalType":"uint256","name":"refWithdrawn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dy","type":"address"}],"name":"calcdiv","outputs":[{"internalType":"uint256","name":"totalWithdrawable","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"},{"internalType":"uint256","name":"keyy","type":"uint256"}],"name":"calculateEarningsForUserKey","outputs":[{"internalType":"uint256","name":"currentReturn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"collectPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"compound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"elapsedDays","type":"uint256"}],"name":"getIndex","outputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"},{"internalType":"uint256","name":"keyy","type":"uint256"}],"name":"getMaxPayOutLeft","outputs":[{"internalType":"uint256","name":"maxPayout","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"}],"name":"getUserPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_adr","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getWhaleTax","outputs":[{"internalType":"uint256","name":"_whaleTax","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amtx","type":"uint256"},{"internalType":"address","name":"ref","type":"address"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"},{"internalType":"uint256","name":"amtx","type":"uint256"},{"internalType":"address","name":"ref","type":"address"}],"name":"stakeFor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"keyy","type":"uint256"},{"internalType":"address","name":"targetToken","type":"address"}],"name":"unStakeToToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"targetToken","type":"address"}],"name":"unstakeAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adr","type":"address"}],"name":"userInfo","outputs":[{"components":[{"internalType":"uint256","name":"key","type":"uint256"},{"internalType":"uint256","name":"depoTime","type":"uint256"},{"internalType":"uint256","name":"amt","type":"uint256"},{"internalType":"bool","name":"initialWithdrawn","type":"bool"},{"internalType":"uint256","name":"withdrawnAmt","type":"uint256"}],"internalType":"struct Depo[]","name":"depoList","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawDivs","outputs":[{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"targetToken","type":"address"}],"name":"withdrawDivsToToken","outputs":[{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"keyy","type":"uint256"}],"name":"withdrawInitial","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawRefBonus","outputs":[],"stateMutability":"nonpayable","type":"function"}]') }, f407: function (t) { t.exports = JSON.parse('[{"inputs":[],"name":"BUSD_ZAP_TAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"_deposit","type":"bool"},{"internalType":"address","name":"_ref","type":"address"},{"internalType":"bool","name":"_miner","type":"bool"}],"name":"zapThoreumToLP","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_deposit","type":"bool"},{"internalType":"address","name":"_ref","type":"address"},{"internalType":"bool","name":"_miner","type":"bool"}],"name":"zapBNBToLP","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"_ref","type":"address"},{"internalType":"bool","name":"_deposit","type":"bool"},{"internalType":"bool","name":"_miner","type":"bool"}],"name":"zapTokenToLP","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"liberaAmount","type":"uint256"},{"internalType":"address","name":"_ref","type":"address"}],"name":"userAddLiquidityAndDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"liberaAmount","type":"uint256"}],"name":"userAddLiquidityAndDepositForBank","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"targetToken","type":"address"}],"name":"unZapToToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"breakLP","outputs":[],"stateMutability":"nonpayable","type":"function"}]') } });